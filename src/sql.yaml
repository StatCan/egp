intersections:
  query:
    WITH inter AS
        (SELECT ST_Intersection(a.geom, b.geom) geom,
                Count(DISTINCT a.index)
         FROM stage_2 AS a,
              stage_2 AS b
         WHERE ST_Touches(a.geom, b.geom)
           AND a.index != b.index GROUP  BY ST_Intersection(a.geom, b.geom))
      SELECT
      geom AS geometry,
      count
      FROM inter
      WHERE COUNT > 2;
attributes:
  query:

    ALTER TABLE stage_2_junc ADD COLUMN id SERIAL PRIMARY KEY;

    DELETE FROM stage_2_junc a
    WHERE EXISTS (SELECT *
                    FROM   stage_2_junc AS b
                    WHERE  St_equals(a.geom, b.geom)
                           AND a.id <> b.id
                           AND a.junctype = 'Dead End');

    DELETE FROM stage_2_junc a
    WHERE EXISTS (SELECT *
                    FROM   stage_2_junc AS b
                    WHERE  St_equals(a.geom, b.geom)
                           AND a.id <> b.id
                           AND a.junctype = 'Intersection');

    DELETE FROM stage_2_junc a
    WHERE EXISTS (SELECT *
                    FROM   stage_2_junc AS b
                    WHERE  St_equals(a.geom, b.geom)
                           AND a.id <> b.id
                           AND a.junctype = 'NatProvTer');

    ALTER TABLE stage_2_junc ADD COLUMN exitnbr character varying(10);

    UPDATE stage_2_junc a SET exitnbr = b.exitnbr FROM stage_2 b WHERE ST_Intersects(a.geom, b.geom) AND b.exitnbr != 'None' AND b.exitnbr IS NOT NULL;

    UPDATE stage_2_junc a SET junctype = 'NatProvTer' WHERE a.id IN (SELECT a.id FROM stage_2_junc a, nb_adm b WHERE ST_Disjoint(a.geom, b.geom));

    SELECT * FROM stage_2_junc;