intersections:
  query:
    WITH inter AS
        (SELECT ST_Intersection(a.geom, b.geom) geom,
                Count(DISTINCT a.uuid)
         FROM stage_2 AS a,
              stage_2 AS b
         WHERE ST_Touches(a.geom, b.geom)
           AND a.uuid != b.uuid GROUP  BY ST_Intersection(a.geom, b.geom))
      SELECT
      geom AS geometry,
      count
      FROM inter
      WHERE COUNT >= 3;
attributes:
  query:

    ALTER TABLE stage_2_junc ADD COLUMN id SERIAL PRIMARY KEY;

    DELETE FROM stage_2_junc a
    WHERE EXISTS (SELECT *
                    FROM   stage_2_junc AS b
                    WHERE  ST_Intersects(a.geom, b.geom)
                           AND a.id <> b.id
                           AND a.junctype = 'Dead End');

    DELETE FROM stage_2_junc a
    WHERE EXISTS (SELECT *
                    FROM   stage_2_junc AS b
                    WHERE  ST_Intersects(a.geom, b.geom)
                           AND a.id <> b.id
                           AND a.junctype = 'Intersection');

    UPDATE stage_2_junc a SET exitnbr = b.exitnbr FROM stage_2 b WHERE ST_Intersects(a.geom, b.geom) AND b.exitnbr != 'None' AND b.exitnbr IS NOT NULL;

    UPDATE stage_2_junc a SET junctype = 'NatProvTer' WHERE a.id IN (SELECT a.id FROM stage_2_junc a, adm b WHERE ST_Disjoint(a.geom, b.geom));

    ALTER TABLE stage_2_junc DROP COLUMN id;

    SELECT j.geom,
      j.accuracy,
      j.acqtech,
      j.credate,
      j.datasetnam,
      j.exitnbr,
      j.junctype,
      j.metacover,
      j.nid,
      j.provider,
      j.revdate,
      j.specvers
      FROM stage_2_junc AS j LEFT JOIN stage_2 AS r ON ST_Intersects(j.geom, r.geom) GROUP BY j.geom,
      j.accuracy,
      j.acqtech,
      j.credate,
      j.datasetnam,
      j.exitnbr,
      j.junctype,
      j.metacover,
      j.nid,
      j.provider,
      j.revdate,
      j.specvers HAVING count(*)<>2;